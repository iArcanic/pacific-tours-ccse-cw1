on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  # Snyk token for SAST
  SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

  # Project variables
  SOLUTION_NAME: asp-net-core-web-app-authentication-authorisation.sln
  DOTNET_CORE_VERSION: 7.0.x

  # Google Cloud Platform variables
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GCP_SA_EMAIL: ${{ secrets.GCP_SA_EMAIL }}
  GCP_SA_KEY: ${{ secrets.GCP_SA_KEY }}
  GCP_REGION: ${{ secrets.GCP_REGION }}
  GCP_GCR_REPO: ${{ secrets.GCP_GCR_REPO }}
  GCP_WORKLOAD_IDENTITY_PROVIDER: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
  # GCP_SERVICE_NAME: ${{ secrets.GCP_SERVICE_NAME }}

  CONTAINER_IMAGE_NAME: ${{ secrets.CONTAINER_IMAGE_NAME }}

  # SQL database variables
  SQL_DB: ${{ secrets.SQL_DB }}
  SQL_SERVER: ${{ secrets.SQL_SERVER }}
  SQL_DB_USERNAME: ${{ secrets.SQL_DB_USERNAME }}
  SQL_DB_PASSWORD: ${{ secrets.SQL_DB_PASSWORD }}
  GCP_CLOUD_SQL_INSTANCE: ${{ secrets.CLOUD_SQL_INSTANCE }}
  CONNECTION_STRING: ${{ secrets.SQL_DATABASE_CONNECTION_STRING }}

jobs:
  # unit-tests:
  #   runs-on: windows-latest

  #   steps:
  #     - name: Checkout source code
  #       uses: actions/checkout@v4

  #     - name: Setup .NET SDK
  #       uses: actions/setup-dotnet@v4
  #       with:
  #         dotnet-version: ${{ env.DOTNET_CORE_VERSION }}

  #     - name: Restore project dependencies
  #       run: dotnet restore ${{ env.SOLUTION_NAME }}

  #     - name: Test project
  #       run: dotnet test --no-build --logger trx --collect "Code coverage"

  sast:
    runs-on: ubuntu-latest
    # needs: unit-tests
    permissions: write-all

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_CORE_VERSION }}

      - name: Restore project dependencies
        run: dotnet restore ${{ env.SOLUTION_NAME }}

      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/dotnet@master
        continue-on-error: true
        with:
          args: --sarif-file-output=snyk.sarif

      - name: Upload result to GitHub code scanning
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: snyk.sarif
          category: snyk-sast-analysis

  docker-build-and-push-to-gcr:
    runs-on: ubuntu-latest
    needs: sast # Add unit-tests job dependency

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Google authentication
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ env.GCP_SA_KEY }}

      - name: Setup Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          version: "latest"
          project_id: ${{ env.GCP_PROJECT_ID }}

      - name: Build Docker Image
        run: |
          echo "Building Docker image..."
          docker build -t ${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.GCP_GCR_REPO }}/${{ env.CONTAINER_IMAGE_NAME }}:${{ github.sha }} .

      - name: Configure Docker client
        run: |
          gcloud auth configure-docker --quiet
          gcloud auth configure-docker ${{ env.GCP_REGION }}-docker.pkg.dev --quiet

      - name: Push Docker image to GCR
        run: |
          echo "Pushing Docker image to GCR..."
          docker push ${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.GCP_GCR_REPO }}/${{ env.CONTAINER_IMAGE_NAME }}:${{ github.sha }}

  # deploy:
  #   runs-on: ubuntu-latest
  #   needs: docker-build-and-push-to-gcr

  #   steps:
  #     - name: Checkout source code
  #       uses: actions/checkout@v4

  #     - name: Google authentication
  #       uses: google-github-actions/auth@v1
  #       with:
  #         service_account: ${{ env.GCP_SA_EMAIL }}

  #     - name: Setup Google Cloud SDK
  #       uses: google-github-actions/setup-gcloud@v1
  #       with:
  #         version: "latest"
  #         project_id: ${{ env.GCP_PROJECT_ID }}
  #         service_account_email: ${{ env.GCP_SA_EMAIL }}
  #         service_account_key: ${{ env.GCP_SA_KEY }}

  #     - name: Deploy to Google Cloud Run
  #       run: |
  #         gcloud run deploy ${{ env.GCP_SERVICE_NAME }} \
  #           --image=${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.CONTAINER_IMAGE_NAME }}/${{ env.GCP_GCR_REPO }}:${{ github.sha }} \
  #           --add-cloudsql-instances ${{ env.GCP_CLOUD_SQL_INSTANCE }} \
  #           --update-env-vars ASPNETCORE_ENVIRONMENT=Production,ConnectionStrings__PacificToursDbConnection=${{ env.CONNECTION_STRING }} \
  #           --platform=managed \
  #           --region=${{ secrets.GCP_REGION }} \
  #           --allow-unauthenticated

  # database-migration:
  #   runs-on: windows-latest
  #   needs: deploy

  #   steps:
  #     - name: Checkout source code
  #       uses: actions/checkout@v4

  #     - name: Setup .NET SDK
  #       uses: actions/setup-dotnet@v4
  #       with:
  #         dotnet-version: ${{ env.DOTNET_CORE_VERSION }}

  #     - name: Install Dotnet Entity Framework CLI tool
  #       run: |
  #         dotnet tool install --global dotnet-ef
  #         dotnet tool restore

  #     - name: Update Database
  #       run: |
  #         dotnet ef database update
  #       env:
  #         ASPNETCORE_ENVIRONMENT: Production
  #         ConnectionStrings__PacificToursDbConnection: ${{ env.CONNECTION_STRING }}

  #     - name: Install SQL Server command-line utilities
  #       run: |
  #         echo "Install SQL Server command-line utilities..."
  #         choco install sqlserver-cmdlineutils -y

  #     - name: Execute custom SQL scripts
  #       working-directory: Scripts/SQL
  #       run: |
  #         for script in *.sql; do
  #           echo "Executing script: $script"
  #           sqlcmd -S ${{ env.SQL_SERVER }} -U ${{ env.SQL_DB_USERNAME }} -P ${{ env.SQL_DB_PASSWORD }} -d ${{ env.SQL_DB }} -i $script
  #         done

  # dast:
  #   runs-on: ubuntu-latest
  #   needs: deploy

  #   steps:
  #     - name: Checkout source code
  #       uses: actions/checkout@v4

  #     - name: Run OWASP ZAP scan
  #       uses: zaproxy/action-full-scan@v0.10.0
  #       with:
  #         target: ""
